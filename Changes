libdogleg (0.15.4) unstable; urgency=medium

  * verbose output has a mode to output vnlog
  * defragmented malloc() calls
  * dogleg_operatingPoint_t stores the step vector we took to get here
  * Added dogleg_optimize2() and dogleg_optimize_dense2() entry points
    that use local parameters

 -- Dima Kogan <dkogan@debian.org>  Fri, 11 Dec 2020 15:37:26 -0800

libdogleg (0.15.1)

  * Various updates to the experimental outlier-rejection logic. These
    break the previous API/ABI, but those were experimental and unreleased
    anyway

 -- Dima Kogan <dima@secretsauce.net>  Tue, 02 Oct 2018 09:19:03 -0700

ligdogleg (0.15)

  * added experimental outlier-rejection logic.
    This is not yet documented, and the API not yet fixed. Use at your own risk

 -- Dima Kogan <dima@secretsauce.net>  Wed, 08 Aug 2018 16:04:38 -0700

libdogleg (0.14)

  * standardized CHOLMOD error messages
  * gradient-testing reports are now printed in an easy-to-parse vnlog

 -- Dima Kogan <dima@secretsauce.net>  Mon, 12 Feb 2018 10:55:44 -0800

libdogleg (0.13)

  * Updated cholmod #includes to work without any -I flags
    This shouldn't break any existing code, since the -I flags become
    unnecessary, but benign
  * Clarified gradient reporting

 -- Dima Kogan <dima@secretsauce.net>  Sun, 27 Aug 2017 16:03:49 -0700

libdogleg (0.12)

  * Exposed a function to compute the Cholesky factorization of JtJ

 -- Dima Kogan <dima@secretsauce.net>  Mon, 01 May 2017 18:50:39 -0700

libdogleg (0.11)

  * I barf if factorization fails for with a way-too-huge lambda

 -- Dima Kogan <dima@secretsauce.net>  Mon, 01 May 2017 18:50:20 -0700

libdogleg (0.10)

  * Improved diagnostic printing: no console output if no errors and if no
    debug logging is requested
  * Added support for solving DENSE optimization problems in addition to
    sparse ones

 -- Dima Kogan <dima@secretsauce.net>  Sun, 23 Apr 2017 01:06:15 -0700

libdogleg (0.09)

  * Build now works with both suitesparse 2.2 and 2.4

 -- Dima Kogan <dima@secretsauce.net>  Mon, 24 Aug 2015 21:34:04 -0700

libdogleg (0.08)

  * Makefile, debian/ tweaked to allow packaging the for the main Debian repository

 -- Dima Kogan <dima@secretsauce.net>  Sun, 04 Nov 2012 21:27:33 -0800

libdogleg (0.07)

  * fixed off-by-one error in reporting of iteration count
  * added sample program
  * improved handling of singular JtJ
  * more efficient trustregion reduction method for failed GN steps
  * builds under OSX. Contributed by Laurent Bartholdi.

 -- Dima Kogan <dima@secretsauce.net>  Tue, 02 Oct 2012 22:41:16 -0700

libdogleg (0.06)

  * API-breaking change: the user can retrieve the full solver context

 -- Dima Kogan <dima@oblong.com>  Tue, 17 Jan 2012 15:57:43 -0800

libdogleg (0.05)

  * I now require debhelper 7, not 8
  * 'install' rules now builds everything
  * updated URL to the license text
  * removed unneeded packaging files
  * packaging shared object in a more debian-like way
  * I now make a native package

 -- Dima Kogan <dima@oblong.com>  Sun, 30 Oct 2011 13:37:39 -0700

libdogleg (0.04-1)

  * Re-licensed under the LGPL
  * better documentation, now in a manpage
  * all versions tied to debian/changelog

 -- Dima Kogan <dima@fatty.local>  Tue, 06 Sep 2011 14:54:33 -0700

libdogleg (0.03-1)

  * un-hardcoded the problem I'm asking CHOLMOD to solve
  * If I ever see a singular JtJ, I factor JtJ + LAMBDA*I from that point on. This is a quick/dirty way to handle singular JtJ matrices
  * CHOLMOD messages now go to stderr, not stdout

 -- Dima Kogan <dima@fatty.local>  Fri, 02 Sep 2011 17:36:25 -0700

libdogleg (0.02-1)

  * libdogleg now reports the sovler rms and the iteration count
  * version bump
  * all debug output now reports more precision
  * debug output now contains rho
  * I now return the 2-norm of the optimal error vector. I no longer try to compute the RMS since I don't know what the inputs I'm passed in mean

 -- Dima Kogan <dima@fatty.local>  Fri, 26 Aug 2011 15:18:47 -0700

libdogleg (0.01-1)

  * Initial release

 -- Dima Kogan <dima@oblong.com>  Mon, 22 Aug 2011 00:33:18 -0700
